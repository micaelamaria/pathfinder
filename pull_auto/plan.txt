PATHFINDER
This is the plan for coding the pathfinder tool.

cd pathfinder/pull_auto/small_scripts

Scripts/functions:
-each output has own MDAnalysis function
-input reader function
-log reader 

Inputs (config file):
-delta x, for example 1nm
-all of slurm arguments: nodes, tasks, time etc.
-mdp files for pulling and eq
-each has some default values or sends an error if not supplied
-Kmin and Kmax
-reaction coordinate
-pull groups
-which part of system for xtc file (e.g. protein)

Outputs:
-error log
    -if not successful, increase wall time or double K_MAX
-pullx and pullf matplotlib png files
-end structure files in pdb format
-rmsd plot of equilibration
-optional xtc rsync with warning of large size
-tree diagram of simulations which shows the successful route
-movie of concat trajectories

TO DO:
-study if you should convert all code to python, would that be easier
    -subprocesses work for running bash commands from inside python
    -jupyter notebooks might be the answer to everything
    -could start with converting some functions first:
        -maybe status, check_if_done, new_K and other math needing functions
    -gromacs has a python package
-run_eq:
    -how to set up longer equilibration
    -time needs to be changed in mdp file
        -code needs to increase nsteps in mdp file
        -and slurm time 
-function for removing unnecessary files
-option to input pdb file or gro file 
-bash daemon for waiting
-log file
-make a file system with folders and move between them
-rsync files, warning for large files
(-comments, README file, testing)

IMPORTANT FOR PYTHON FILE:
-use anaconda prompt/terminal
-use test environment
-run with python analyze.py

-run eq and python etc work with wsl with conda
-run conda activate to activate base and run run_eq.sh normally

Errors:

Questions:
-is exit 1 best way to end program?
