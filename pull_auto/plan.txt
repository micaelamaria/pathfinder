PATHFINDER
This is the plan for coding the pathfinder tool.

cd pathfinder/pull_auto/small_scripts

Scripts/functions:
-each output has own MDAnalysis function
-input reader function
-log reader 

Inputs (config file):
-delta x, for example 1nm
-all of slurm arguments: nodes, tasks, time etc.
-mdp files for pulling and eq
-each has some default values or sends an error if not supplied
-Kmin and Kmax
-reaction coordinate
-pull groups
-which part of system for xtc file (e.g. protein)

Outputs:
-error log
    -if not successful, increase wall time or double K_MAX
-pullx and pullf matplotlib png files
-end structure files in pdb format
-rmsd plot of equilibration
-optional xtc rsync with warning of large size
-tree diagram of simulations which shows the successful route
-movie of concat trajectories


TO DO:
-after submitting batch, exit program to wait for sim, after that analyze
-make demo
-in grompp, check that the warning can be ignored
-run multiples of each iterations
-modules to import in config file


Work in progress: 
-LEARN: daemonize process i.e. make script not run on the terminal, but in the background
-check in the beginning, if start values are bigger/smaller than target values, depending on push/pull dir
-new_K function: when to reduce from 5 K's to 3?
    -when K array has duplicate values
-look into if you should use array jobs 

TO DO:
-how to make sure sims for duplicate K's wont be run?
-study if you should convert all code to python, would that be easier
    -subprocesses work for running bash commands from inside python
    -jupyter notebooks might be the answer to everything
    -could start with converting some functions first:
        -maybe status, check_if_done, new_K and other math needing functions
-run_eq:
    -how to set up longer equilibration
-bash daemon for waiting
-outputs such as plots, etc.
-make a file system with folders and move between them
-rsync files, warning for large files
-documentation
(-comments, README file, testing)

IMPORTANT FOR PYTHON FILE:
-use anaconda prompt/terminal
-use test environment
-run with python analyze.py

-run eq and python etc work with wsl with conda
-run conda activate to activate base and run run_eq.sh normally

Errors:

Questions:
-is exit 1 best way to end program?
-if the user inputs pdb file, they need to also input info for
pdb2gmx, so wouldnt it just be earier to force the user to convert it 
themself?
